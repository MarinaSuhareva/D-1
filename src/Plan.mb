# План автоматизации
Цель: Автоматизировать сценарии (как позитивные, так и негативные) покупки тура через Приложение.


Тестовые данные

Корректными данными при заполнении полей ввода формы считаются:

Номер карты: цифры, в формате **** **** **** ****

Месяц: 01-12, но не ранее текущего месяца в случае, если указан текущий год

Год: последние две цифры порядкового номера года, не ранее текущего года, не более 5-ти лет от текущего года

Владелец: латиница, спецсимволы (пробел, дефис)

CVC: диапазон значений от 001 до 999.

Набор карт, представленный для тестирования (файл data.json):

4444 4444 4444 4441, status APPROVED

4444 4444 4444 4442, status DECLINED

Несуществующая карта

4444 4444 4444 4444
Проверка поддержки заявленных СУБД:

MySql

PostgreSQL

#Тестовые сценарии

Позитивные сценарии

Оплата по карте со статусом APPROVED

1) оплата по дебетовой карте Номер карты 4444 4444 4444 4441, остальные поля заполнены корректными данными.
 Ожидаемый результат: появилось всплывающее окно "Операция одобрена Банком"

2)оплата по кредитной карте Номер карты 4444 4444 4444 4441, остальные поля заполнены корректными данными
Ожидаемый результат: появилось всплывающее окно "Операция одобрена Банком"

Негативные сценарии

Оплата по карте со статусом DECLINED

1)оплата по заблокированной дебетовой карте Номер карты 4444 4444 4444 4442, остальные поля заполнены корректными данными
Ожидаемый результат: появилось всплывающее окно "Ошибка!"

2)оплата по заблокированной кредитной карте Номер карты 4444 4444 4444 4442, остальные поля заполнены корректными данными
Ожидаемый результат: появилось всплывающее окно "Ошибка!"

Несуществующая карта

3)оплата по дебетовой карте Номер карты 4444 4444 4444 4444, остальные поля заполнены корректными данными
Ожидаемый результат: появилось всплывающее окно "Ошибка!"

4)оплата по кредитной карте Номер карты 4444 4444 4444 4444, остальные поля заполнены корректными данными
Ожидаемый результат: появилось всплывающее окно "Ошибка!"

...

# Перечень используемых инструментов с обоснованием выбора

1. IntelliJ IDEA - Многофункциональная среда разработки;
2. Java 11- Универсальный язык, позволяющий работать на большинстве ОС и различном оборудовании;
3. Gradle - Система сборки проекта. Проще подключать внешние зависимости;
4. JUnit5 - инструмент тестирования;
5. Selenide - Фреймворк для автоматизированного тестирования веб-приложений на основе Selenium WebDriver.
6. Lombok - Плагин для создания аннотаций, заменяющих значительное количество однообразных конструкторов JAVA ;
7. Faker - для генерации тестовых данных.
8. Appveyor - Система CI. Непрерывный контроль интеграции кода.
9. Allure - Система подготовки отчётов.
10.Git и GitHub-для полноценной работы с фейморками и хранения автотестов;


# Перечень и описание возможных рисков при автоматизации

Возможны сложности при настройке двух СУБД ("MySQL" и "PostgreSQL"), и корректном подключении к каждой из них.

# Интервальная оценка с учетом рисков (в часах)

Настройка ПО -

Написание и отладка автотестов -

Заведение issue по итогам прогонов автотестов -

Подготовка отчетных документов по итогам автоматизированного тестирования -

Подготовка отчетных документов по итогам автоматизации -


# План сдачи работ

Планирование автоматизации тестирования: до

Автоматизация тестирования: до

Отчетные документы по итогам автоматизированного тестирования: до

Отчетные документы по итогам автоматизации: до